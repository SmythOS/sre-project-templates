//!!! DO NOT EDIT THIS FILE, IT IS AUTO-GENERATED !!!//

import { Agent, createSafeAccessor, ComponentWrapper, ComponentInput } from '@smythos/sdk';

export interface TChecksumSettings {
    name?: string;
}

export type TChecksumInputs = {
    /** The data to calculate the checksum of */
    data?: string;
    /** The format of the checksum, accepted values are hex and base64 */
    format?: string;
    /** The algorithm to use to calculate the checksum, accepted values are md5, sha1, sha256 and sha512 */
    algorithm?: string;
    [key: string]: any;
};

export type TChecksumOutputs = {
    result: any;
    [key: string]: any;
};

export function Checksum(settings?: TChecksumSettings, agent?: Agent) {        
    const dataObject: any = { 
        name: 'Checksum', 
        settings: {            
            ...settings
        }
    };
    const component = new ComponentWrapper(dataObject, agent);

    if (agent) {
        (agent.structure.components as ComponentWrapper[]).push(component);
    }
    
    const _out: TChecksumOutputs = createSafeAccessor({
        result: createSafeAccessor({}, component, 'result', {"type":"string"}),
    }, component, '');

    const _in: { [key: string]: ComponentInput } = {
        data: {
            component,
            type: 'Text',
            optional: false,
            default: false,
        },
        format: {
            component,
            type: 'Text',
            optional: false,
            default: false,
        },
        algorithm: {
            component,
            type: 'Text',
            optional: false,
            default: false,
        },
    };

    dataObject.outputs = _out;
    dataObject.inputs = _in;

    component.inputs(_in);

    const wrapper = {
        /** Component outputs - access via .out.OutputName */
        out: _out,        

        /** 
         * Create or Connect the component inputs 
         * if the input does not exist, it will be created
         * @examples 
         *    - component.in({ Input: source.out.data })
         *    - component.in({ Input: { type: 'string', source:source.out.data } })
         */        
        in: component.inputs.bind(component) as (inputs: TChecksumInputs) => void,
    };

    return wrapper;
}
